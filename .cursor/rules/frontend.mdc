---
description: 
globs: *.tsx,*.ts,*.json
alwaysApply: false
---
# フロントエンド開発を進めるにあたっての知識やルール

## 使用技術に関して
TypeScriptでフレームワークはNext.jsを利用しています。
その他ライブラリや各バージョンに関しては、[package.json](mdc:web/package.json)を確認してください。

## ディレクトリ構成
```text
- web/: ルートディレクトリ
    - src/: 
      - app/: AppRouterを利用したファイルベースルーティング
      - components/: コンポーネント群
          - ui/: 共通で使用するUIコンポーネント
          - features/: 機能ごとのコンポーネント
          - layouts/: レイアウトコンポーネント
      - lib: ヘルパー関数、ユーティリティなど
      - hooks: カスタムフック
      - types: 共通の型定義
    - public: 静的資材
    - .next.config.ts: Next.js設定ファイル
    - tsconfig.json: TypeScript設定ファイル
    - pacakge.json: npm パッケージ管理ファイル
```

## 命名規則
- ディレクトリ名は、基本1単語で小文字を利用
    - 2単語以上を利用する場合は、ケバブケースを利用
- ファイル名は、基本1単語で小文字を利用
    - 2単語以上を利用する場合は、ケバブケースを利用
    - *コンポーネントファイルは例外で、パスカルケースを利用*
- コンポーネント名は、パスカルケースを利用

## コーディングに関するルール
コードの品質と一貫性を保つために、以下のコーディングルールを定めます。

### 1. 基本原則
- **UIの変更**:
    - *UIの変更はこちらから指示するまで、絶対に変更しないでください。*
- **ESLint と Prettier の遵守**:
    - プロジェクトに導入されている ESLint と Prettier の設定に必ず従ってください。
    - コミット前に `lint` および `format` を実行し、エラーや警告がない状態にしてください。
- **TypeScript の活用**:
    - TypeScript の型システムを最大限に活用し、可能な限り型安全なコードを記述してください。
    - `any` 型の使用は原則として避け、具体的な型を定義してください。やむを得ず使用する場合は、その理由をコメントで明記してください。
    - 型推論が可能な場合でも、関数や変数の意図を明確にするために型を明示的にすることを推奨します。

### 2. React & Next.js (App Router)
- **関数コンポーネント**:
    - コンポーネントはすべて関数コンポーネントで記述してください。クラスコンポーネントは使用しません。
    - 巨大なコンポーネントにならないように注意してください。適宜コンポーネントを分割するなどし、シンプルなコンポーネントになるようにしてください。
- **React Hooks**:
    - React Hooks のルール（トップレベルでの呼び出し、ループや条件分岐内での呼び出し禁止など）を遵守してください。
    - カスタムフックは `use` プレフィックスを付け（例: `useUserData`）、`hooks/` ディレクトリに配置してください。
- **Server Components と Client Components**:
    - App Router の特性を理解し、Server ComponentsとClient Componentsを適切に使い分けてください。
    - データフェッチやサーバーサイドでのみ完結する処理は、Server Componentsで実装することを検討してください。
- **Props**:
    - コンポーネントの Props には必ず型を定義してください（`types/` ディレクトリの共通型や、コンポーネントファイル内でのローカルな型定義を利用）。
    - boolean 型の Props は `is〇〇`, `has〇〇`, `can〇〇` のように状態が明確にわかる接頭辞を推奨します（例: `isLoading`, `hasPermission`）。
- **イベントハンドラ**:
    - コンポーネント内で定義するイベントハンドラの関数名は `handle〇〇` という命名規則を推奨します（例: `handleClick`, `handleSubmit`）。
- **ルーティング**:
    - ページ間のナビゲーションには、原則として Next.js の `<Link>` コンポーネントを使用してください。外部リンクや特別な理由がない限り、素の `<a>` タグの直接使用は避けてください。
- **画像表示**:
    - 画像の表示には、原則として Next.js の `<Image>` コンポーネントを使用し、パフォーマンス最適化（遅延読み込み、WebP形式への自動変換など）の恩恵を受けてください。必要な `width` と `height` を指定するか、`fill` prop を適切に使用してください。
- **状態管理**:
    - 状態管理をするために、不必要なレンダリングを起こさないように注意してください。

### 3. TypeScript
- **型の明示**:
    - 関数の引数と戻り値には、原則として明示的に型を定義してください。
    - `interface` と `type` の使い分けについては、一般的にはオブジェクトの形状定義には `interface`、ユニオン型、交差型、タプル型、プリミティブ型のエイリアスなどには `type` を使用してください。
- **エラーハンドリング**:
    - `lint` や型チェックで検出されたエラーは、原則としてすべて修正してください。
    - `@ts-ignore` や `eslint-disable` などのディレクティブは、それが本当に必要で、かつ安全であることが確認できる場合に限り、最小限のスコープで使用し、必ずその理由をコメントとして残してください。

### 4. TailwindCSS
- **任意値について**:
    - `[]`を使った任意値でのスタイリングは極力避けてください。（例: `text-[10vw]`）
    - どうしても使用する場合は、コメントで意図を記載してください。

### 4. コーディングスタイル
- **インポート**:
    - `import` 文は`@`を使ったパスエイリアスを使用しているので従ってください。（例: `@/components/hoge.tsx`）
    - `import` 文の順序は下記にしてください。
        1. フレームワークやライブラリ（例: `import React from 'react'`）
        2. 型や定数、カスタムフック（例: `import useHoge from '@/hooks/useHoge.ts'`）
        3. カスタムコンポーネント（例: `import HogeComp from '@/components/ui/Hoge.tsx'`）
- **早期リターン (Early Return)**:
    - ネストが深くなる `if` 文を避け、条件に合致しない場合に早期リターンするガード節のパターンを積極的に使用してください。